---
import "@/styles/global.css";
import siteData from "@config/siteData.json";
import Footer from "@components/Footer/Footer.astro";
import Nav from "@components/Nav/Nav.astro";
import WhatsAppButton from "@components/WhatsAppButton/WhatsAppButton.astro";
import BaseHead from "@layouts/BaseHead.astro";
import ChatWidget from "@components/ChatCard/ChatWidget.astro";

// heroImage and authorData are defined on blog posts
// authorData could also be defined on the about author page
interface Props {
	type?: "general";
	navStartStyle?: "default" | "white";
	title: string;
	description: string;
	heroImage?: ImageMetadata;
	noindex?: boolean; // you need to opt-in to no indexing, as it hides the page from search engines
}

const {
	type = "general",
	navStartStyle = "default",
	title,
	description,
	heroImage,
	noindex = false,
} = Astro.props as Props;
---

<!doctype html>
<html lang="en" transition:animate="fade">
	<head>
		<BaseHead
			type={type}
			title={title}
			description={description}
			image={heroImage ? heroImage : undefined}
			noindex={noindex}
		/>
	</head>
	<body id="body" class="bg-base-50 text-base-900">
		<div class="min-h-[100lvh]">
			<Nav startStyle={navStartStyle} />
			<main id="main-content">
				<slot />
			</main>
		</div>
		<Footer />
		<WhatsAppButton />
		<ChatWidget />
	</body>
</html>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const whatsappToggle = document.getElementById("whatsapp-toggle");
		const chatWidget = document.getElementById("chat-widget");
		const closeChat = document.getElementById("close-chat");
		const chatMessages = document.getElementById("chat-messages");
		const chatInput = document.getElementById("chat-input");
		const sendChat = document.getElementById("send-chat");

		if (whatsappToggle && chatWidget) {
			whatsappToggle.addEventListener("click", () => {
				chatWidget.classList.toggle("hidden");
			});
		}

		if (closeChat && chatWidget) {
			closeChat.addEventListener("click", () => {
				chatWidget.classList.add("hidden");
			});
		}

		const handleSendMessage = async () => {
			const message = chatInput.value.trim();
			if (!message) return;

			appendMessage(message, 'user');
			chatInput.value = '';

			try {
				const response = await fetch('/api/chat', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ message }),
				});

				const data = await response.json();

				if (data.reply) {
					appendMessage(data.reply, 'bot');
				}
			} catch (error) {
				console.error('Error al enviar mensaje:', error);
				appendMessage('Hubo un error al conectar. IntÃ©ntalo de nuevo.', 'bot');
			}
		};

		if (sendChat && chatInput) {
			sendChat.addEventListener("click", handleSendMessage);
			chatInput.addEventListener("keypress", (e) => {
				if (e.key === 'Enter') handleSendMessage();
			});
		}

		function appendMessage(text, sender) {
			const messageElement = document.createElement('div');
			messageElement.classList.add('mb-2', 'text-sm');

			const bubble = document.createElement('p');
			bubble.textContent = text;

			if (sender === 'user') {
				messageElement.classList.add('text-right');
				bubble.classList.add('bg-blue-500', 'text-white', 'py-1', 'px-3', 'rounded-lg', 'inline-block');
			} else {
				bubble.classList.add('bg-gray-300', 'text-black', 'py-1', 'px-3', 'rounded-lg', 'inline-block');
			}

			messageElement.appendChild(bubble);
			chatMessages.appendChild(messageElement);
			chatMessages.scrollTop = chatMessages.scrollHeight;
		}
	});
</script>
